<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sns.dao.UserDao">
	
	<!-- 회원 가입 sql provider가 local이면 pwd는 받아온 값 저장, local이 아니면 null로 저장-->
	<insert id="mtdInsert" parameterType="com.sns.dto.UserDto">
		insert into user
		(uuid, username, tag_id, email, phone, birthday, provider, is_using, create_at, pwd, social_key)
		values
		(#{uuid}, #{username}, #{tag_id}, #{email}, #{phone}, #{birthday}, #{provider}, #{is_using}, now(),
		<choose>
			<when test="provider == 'local'">
				#{pwd}
			</when>
			<otherwise>
				null
			</otherwise>
		</choose>,
		<choose>
			<when test="provider != 'local'">
				#{social_key}
			</when>
			<otherwise>
				null
			</otherwise>
		</choose>
		)
	</insert>
	
	<!-- 회원 상세 정보 반환 -->
	<select id="mtdUserDetailList" resultType="com.sns.dto.UserDetailDto">
		SELECT u.uuid AS uuid, u.username, u.tag_id, u.email, u.phone, u.birthday, u.is_admin, u.provider, u.create_at, u.is_using, u.delete_at, u.is_delete, u.suspended_cnt, up.file_id AS file_id, f.up_filename AS up_filename
		FROM user u
		LEFT JOIN user_profile up ON u.uuid = up.user_id
		LEFT JOIN file_list f ON up.file_id = f.file_id
		WHERE u.is_delete = false AND up.is_using = true
	</select>
	
	<!-- 회원 탈퇴 처리 -->
	<update id="mtdUserResign">
		UPDATE user SET is_using = false, is_delete = true, delete_at = now() WHERE uuid = #{uuid}
	</update>
	
	<!-- 소셜 회원가입 사용자 정보 추가 -->
	<update id="mtdSocialJoin" parameterType="com.sns.dto.UserDto">
		update user set username=#{username}, tag_id=#{tag_id}, phone=#{phone}, birthday=#{birthday}, is_using=#{is_using}, create_at=now()
		where uuid=#{uuid}
	</update>
	
	<!-- 전체 회원 목록 반환 -->
	<select id="mtdSelectAllUser" resultType="com.sns.dto.UserDto">
		SELECT * FROM user ORDER BY create_at DESC
	</select>
	
	<!-- uuid로 회원 찾기 -->
	<select id="mtdFindByUuid" resultType="com.sns.dto.UserDto">
		select * from user where uuid = #{uuid}
	</select>
	
	<!-- tag_id로 회원 찾기 -->
	<select id="mtdFindByTagId" resultType="com.sns.dto.UserDto">
		select * from user where tag_id = #{tag_id}
	</select>
	
	<!-- email과 provider로 회원 찾기 -->
	<select id="mtdFindByEmailAndProvider" resultType="com.sns.dto.UserDto">
		select * from user where email = #{email} and provider = #{provider}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="mtdUpdateUser" parameterType="com.sns.dto.UserDto">
		update user set tag_id = #{tag_id}, username = #{username}, phone = #{phone}, is_update = true, update_at = now(), introduce = #{introduce}
		where uuid = #{uuid}
	</update>
	
	<!-- tag_id 중복 확인 -->
	<select id="mtdTagIdCheck" resultType="java.lang.Boolean">
		select case when count(*) > 0 then true else false end from user where tag_id = #{tag_id}
	</select>
	
	<!-- 회원 비활성화 처리 -->
	<update id="mtdUsingStatusFalse">
		UPDATE user SET is_using = false WHERE uuid = #{uuid}
	</update>
	
	<!-- 회원 활성화 처리 -->
	<update id="mtdUsingStatusTrue">
		UPDATE user SET is_using = true WHERE uuid = #{uuid}
	</update>
	
	<!-- 회원 활성화 상태 -->
	<select id="mtdIsUsingUser" resultType="java.lang.Boolean">
		SELECT is_using FROM user WHERE uuid = #{uuid}
	</select>
	
	<!-- uuid로 tag_id 가져오기 -->
	<select id="mtdSelectTagId" resultType="java.lang.String">
		select tag_id from user where uuid = #{uuid}
	</select>
	
	<!-- username, tag_id, introduce로 회원 찾기 -->
	<select id="mtdSearchUser" resultType="com.sns.dto.UserDetailDto">
		SELECT u.uuid AS uuid, u.username, u.tag_id, u.email, u.phone, u.birthday, u.is_admin, u.provider, u.create_at, u.is_using, u.delete_at, u.is_delete, u.suspended_cnt, up.file_id AS file_id, f.up_filename AS up_filename
		FROM user u
		LEFT JOIN user_profile up ON u.uuid = up.user_id
		LEFT JOIN file_list f ON up.file_id = f.file_id
		WHERE (u.username LIKE CONCAT("%", #{keyword}, "%"))
		OR (u.tag_id LIKE CONCAT("%", #{keyword}, "%"))
		OR (u.introduce LIKE CONCAT("%", #{keyword}, "%"))
		AND u.is_delete = false AND up.is_using = true AND u.is_admin = true
		ORDER BY u.create_at DESC
	</select>

	<!-- 관리자 목록 확인 -->
	<select id="mtdSelectAllAdmin" resultType="com.sns.dto.UserDetailDto">
		SELECT u.uuid AS uuid, u.username, u.tag_id, u.email, u.phone, u.birthday, u.is_admin, u.provider, u.create_at, u.is_using, u.delete_at, u.is_delete, u.suspended_cnt, up.file_id AS file_id, f.up_filename AS up_filename
		FROM user u
		LEFT JOIN user_profile up ON u.uuid = up.user_id
		LEFT JOIN file_list f ON up.file_id = f.file_id
		WHERE u.is_delete = false AND up.is_using = true AND u.is_admin = true
		ORDER BY u.create_at DESC
	</select>
	
	<!-- 관리자 등록 -->
	<update id="mtdRegAdmin" parameterType="java.lang.String">
		UPDATE user SET is_admin = true WHERE uuid = #{uuid}
	</update>
	
	<!-- 관리자 등록 해제 -->
	<update id="mtdClearAdmin" parameterType="java.lang.String">
		UPDATE user SET is_admin = false WHERE uuid = #{uuid}
	</update>
</mapper>